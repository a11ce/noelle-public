#!/bin/bash

SOURCE=${BASH_SOURCE[0]}
while [ -L "${SOURCE}" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR=$( cd -P "$( dirname "${SOURCE}" )" >/dev/null 2>&1 && pwd )
  SOURCE=$(readlink "${SOURCE}")
  # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  [[ ${SOURCE} != /* ]] && SOURCE=$DIR/$SOURCE 
done
installDir=$(realpath $( cd -P "$( dirname "${SOURCE}" )" >/dev/null 2>&1 && pwd )/..)

OPT="opt" ;

########### LLVM analyses
AA_BASE="-basic-aa" ;

########### SVF
if test -f "${installDir}/lib/libSvf.so" ; then
  WPAPASS="-load ${installDir}/lib/libSvf.so -load ${installDir}/lib/libCudd.so -stat=false" ;
  WPAPASSINV="-break-constgeps" ;
else
  WPAPASS="" ;
  WPAPASSINV="" ;
fi

########### Transformations
NORMALIZATION_PASSES="${AA_BASE} ${WPAPASS} -mem2reg -simplifycfg-sink-common=false ${WPAPASSINV} -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --function-attrs --rpo-function-attrs" ;

cmdToExecute="${OPT} ${NORMALIZATION_PASSES} $@" ;
echo $cmdToExecute ;
eval $cmdToExecute ;

# Add Loop IDs
# Take arguments. This is how noelle-norm is used: noelle-norm input.bc -o output.bc
outputbc="$3" ;
cmdToExecute="noelle-meta-loop-embed ${outputbc} -o ${outputbc}" ;
echo $cmdToExecute ;
eval $cmdToExecute ;
