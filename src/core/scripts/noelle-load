#!/bin/bash -e

SOURCE=${BASH_SOURCE[0]}
while [ -L "${SOURCE}" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR=$( cd -P "$( dirname "${SOURCE}" )" >/dev/null 2>&1 && pwd )
  SOURCE=$(readlink "${SOURCE}")
  # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  [[ ${SOURCE} != /* ]] && SOURCE=$DIR/$SOURCE 
done
installDir=$(realpath $( cd -P "$( dirname "${SOURCE}" )" >/dev/null 2>&1 && pwd )/..)

OPT="opt" ;

# Check the inputs
if test $# -lt 1 ; then
  echo "USAGE: `basename $0` OPT-OPTIONS" ;
  exit 1;
fi

verbosityLevel="0";
for currentOption in "$@"
do
    valueOfCurrentOption=${currentOption#*=};
    nameOfCurrentOption=${currentOption%=*};
    if test "$nameOfCurrentOption" == "--noelle-verbose" ; then
      verbosityLevel="$valueOfCurrentOption" ;
    fi
done

###########     LLVM alias analyses
AA="-disable-basic-aa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa"
EXTRA_AA=""


###########     SCAF
if test -f "${installDir}/lib/libSCAFUtilities.so" ; then
  SCAFPASS="-load ${installDir}/lib/libSCAFUtilities.so -load ${installDir}/lib/libMemoryAnalysisModules.so" ;
  LOOPAA=`loopaa`
  EXTRA_AA="${EXTRA_AA} -noellescaf"
else
  SCAFPASS="" ;
  LOOPAA=" " ;
fi


###########     SVF
if test -f "${installDir}/lib/libSvf.so" ; then
  WPAPASS="-load ${installDir}/lib/libSvf.so -load ${installDir}/lib/libCudd.so -stat=false"
  EXTRA_AA="${EXTRA_AA} -noellesvf"
else
  WPAPASS="" ;
fi


########### NOELLE analyses
PDGPASS="-load ${installDir}/lib/AllocAA.so -load ${installDir}/lib/AliasAnalysisEngine.so -load ${installDir}/lib/TalkDown.so -load ${installDir}/lib/CallGraph.so -load ${installDir}/lib/DG.so -load ${installDir}/lib/PDG.so -load ${installDir}/lib/SCCDAG.so -load ${installDir}/lib/PDGPrinter.so -load ${installDir}/lib/MayPointsToAnalysis.so -load ${installDir}/lib/PDGGenerator.so -load ${installDir}/lib/MemoryCloningAnalysis.so"


########### All analyses
ANALYSES="${AA} ${LOOPAA} -scalar-evolution -loops -domtree -postdomtree ${EXTRA_AA} -load ${installDir}/lib/LoopIterationSpaceAnalysis.so -load ${installDir}/lib/LDGGenerator.so -load ${installDir}/lib/DependenceAnalysis.so -load ${installDir}/lib/CallGraphAnalysis.so"


########### Transformations
OPTPASSES="-load ${installDir}/lib/CallGraph.so  ${WPAPASS} ${SCAFPASS} ${PDGPASS} -load ${installDir}/lib/Architecture.so -load ${installDir}/lib/BasicUtilities.so -load ${installDir}/lib/TypesManager.so -load ${installDir}/lib/GlobalsManager.so -load ${installDir}/lib/FunctionsManager.so -load ${installDir}/lib/ConstantsManager.so -load ${installDir}/lib/Linker.so -load ${installDir}/lib/Dominators.so -load ${installDir}/lib/Task.so -load ${installDir}/lib/DataFlow.so -load ${installDir}/lib/HotProfiler.so -load ${installDir}/lib/LoopStructure.so -load ${installDir}/lib/LoopEnvironment.so -load ${installDir}/lib/LoopForest.so -load ${installDir}/lib/LoopInvariants.so -load ${installDir}/lib/LoopInductionVariables.so -load ${installDir}/lib/LoopCarriedDependences.so -load ${installDir}/lib/LoopSCCAttributes.so -load ${installDir}/lib/LoopSCCDAGAttributes.so -load ${installDir}/lib/LoopSCCDAGNormalizer.so -load ${installDir}/lib/LoopContent.so -load ${installDir}/lib/LoopNestingGraph.so -load ${installDir}/lib/Scheduler.so -load ${installDir}/lib/Outliner.so -load ${installDir}/lib/MetadataManager.so -load ${installDir}/lib/LoopUnroll.so -load ${installDir}/lib/LoopWhilifier.so -load ${installDir}/lib/LoopDistribution.so -load ${installDir}/lib/LoopTransformer.so -load ${installDir}/lib/CFGAnalysis.so  -load ${installDir}/lib/CFGTransformer.so -load ${installDir}/lib/CompilationOptionsManager.so -load ${installDir}/lib/Noelle.so"


# Set the command to execute
cmdToExecute="${OPT} -enable-new-pm=0 ${OPTPASSES} ${ANALYSES} ${@}"

# Print the command
if test "$verbosityLevel" != "0" ; then
  echo $cmdToExecute ;
fi

# Execute the command
eval $cmdToExecute

if test $? -ne 0 ; then
  exit 1;
fi
