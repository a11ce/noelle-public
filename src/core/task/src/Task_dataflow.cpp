/*
 * Copyright 2022 - 2023  Simone Campanoni
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights to
 use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 of the Software, and to permit persons to whom the Software is furnished to do
 so, subject to the following conditions:

 * The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
 OR OTHER DEALINGS IN THE SOFTWARE.
 */
#include "noelle/core/Task.hpp"

namespace llvm::noelle {

void Task::adjustDataAndControlFlowToUseClones(void) {

  /*
   * Rewire the data flows.
   */
  for (auto origI : this->getOriginalInstructions()) {
    auto cloneI = this->getCloneOfOriginalInstruction(origI);
    this->adjustDataAndControlFlowToUseClones(cloneI);
  }

  return;
}

void Task::adjustDataAndControlFlowToUseClones(Instruction *cloneI) {

  /*
   * Adjust basic block references of terminators and PHI nodes
   */
  if (cloneI->isTerminator()) {
    for (auto i = 0u; i < cloneI->getNumSuccessors(); ++i) {
      auto succBB = cloneI->getSuccessor(i);

      /*
       * If the successor basic block is already part of the task body, then we
       * don't need to do anything.
       */
      if (succBB->getParent() == this->getTaskBody()) {
        continue;
      }

      /*
       * If the basic block is not part of the original set of basic blocks,
       * then we can skip it for now as the task body is in transition to be
       * modified.
       */
      if (!this->isAnOriginalBasicBlock(succBB)) {
        continue;
      }

      /*
       * Adjust the successor.
       */
      cloneI->setSuccessor(i, this->getCloneOfOriginalBasicBlock(succBB));
    }
  }

  /*
   * Handle PHI instructions.
   */
  if (auto phi = dyn_cast<PHINode>(cloneI)) {
    for (auto i = 0u; i < phi->getNumIncomingValues(); ++i) {
      auto incomingBB = phi->getIncomingBlock(i);

      /*
       * If the incoming basic block is already part of the task body, then we
       * have already adjusted it.
       */
      if (incomingBB->getParent() == this->getTaskBody()) {
        continue;
      }

      /*
       * If the basic block is not part of the original set of basic blocks,
       * then we can skip it for now as the task body is in transition to be
       * modified.
       */
      if (!this->isAnOriginalBasicBlock(incomingBB)) {
        continue;
      }

      /*
       * Adjust the data flow.
       */
      auto cloneBB = this->getCloneOfOriginalBasicBlock(incomingBB);
      phi->setIncomingBlock(i, cloneBB);
    }
  }

  /*
   * Adjust values (other instructions and live-in values) used by clones
   */
  for (auto &op : cloneI->operands()) {

    /*
     * Fetch the current operand of @cloneI
     */
    auto opV = op.get();

    /*
     * If the value is a skipped environment variable, there is nothing we need
     * to do.
     */
    if (this->isSkippedEnvironmentVariable(opV)) {
      continue;
    }

    /*
     * If the value is a constant, then there is nothing we need to do.
     */
    if (dyn_cast<Constant>(opV)) {
      continue;
    }

    /*
     * If the value is a loop live-in one, set it to the value loaded from the
     * loop environment passed to the task.
     */
    if (this->isAnOriginalLiveIn(opV)) {
      auto internalValue = this->getCloneOfOriginalLiveIn(opV);
      op.set(internalValue);
      continue;
    }

    /*
     * The value is not a live-in.
     *
     * If the value is generated by another instruction within the task, then
     * set it to the equivalent cloned instruction.
     */
    if (auto opI = dyn_cast<Instruction>(opV)) {
      if (this->isAnOriginalInstruction(opI)) {
        auto cloneOpI = this->getCloneOfOriginalInstruction(opI);
        op.set(cloneOpI);
      }
    }
  }

  return;
}

} // namespace llvm::noelle
